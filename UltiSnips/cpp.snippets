priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#               Global functions                          #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
    args = str(arglist).split(',')

    if len(args) > 1:
        c = 0
        for arg in args:
            if c == 0:
                snip.rv += arg
                c = 1
            else:
                snip += '*       : %s' % arg.strip()
    else:
        snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet main
int main()
{
    ${0}
}
endsnippet

snippet el "general for else" b
else
{
    ${1:Statements}
}
endsnippet

snippet forc "general for loop (for)"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
    ${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
    ${1/(\w+).*/$1/} (${2:arguments});
    virtual ~${1/(\w+).*/$1/} ();

private:
    ${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
    ${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
    char buf[1024];
    while(size_t len = fread(buf, 1, sizeof(buf), fp))
        v.insert(v.end(), buf, buf + len);
    fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
    $3

public:
    $1();
    virtual ~$1();
};

#endif /* $2 */
endsnippet

snippet fh "Description of file head." b
/**
 * @file        `!v vim_snippets#FileFullName('$1', 'FileName')`
 * @date        `!v strftime("%b %d, %Y")`
 * @author      `!v g:snips_author`
 * @maintainer	`!v g:snips_author`
 * @brief       ${1:brief}
*/
endsnippet

snippet fhh "Description of file head." b
/**
 * @file        `!v vim_snippets#FileFullName('$1', 'FileName')`
 * @date        `!v strftime("%b %d, %Y")`
 * @author      `!v g:snips_author`
 * @maintainer  `!v g:snips_author`
 * @brief       ${1:brief}
*/
#pragma once
// self

// common modules

// wsengine

// pb, std, thirdparty and others

endsnippet

snippet fht "File header of test" b
#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <unordered_map>
#include <string>
using namespace std;

int main()
{
	return 0;
}
endsnippet

snippet tbd "Test base derive" b

int g_count = 0;
class Base {
public:
	Base() {
		m_id = g_count++;
		cout << "Base create. id: " << m_id << endl;
	}
	~Base() {
		cout << "Base destroy. id: " << m_id << endl;
	}
protected:
	int m_id = 0;
};

class Derive : public Base {
public:
	Derive() {
		m_sub_id = g_count++; 
		cout << "Derive create. id: " << m_sub_id << endl;
	}
	~Base() {
		cout << "Derive destroy. id: " << m_sub_id << endl;
	}
protected:
	int m_sub_id = 0;
}
endsnippet

snippet fhp "Description of file head." b
/**
 * @file        `!v vim_snippets#FileFullName('$1', 'FileName')`
 * @date        `!v strftime("%b %d, %Y")`
 * @author      lihaiming
 * @matainer    lihaiming
 * @brief       ${1:brief}
*/
// self
#include "`!v vim_snippets#Filename('$1', 'FileName')`.h"

// common modules

// wsengine

// pb, std, thirdparty and others

endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
 * @brief:      ${4:brief}
 * @param:      `!p write_docstring_args(t[3],snip)`
 * @return:     `!p snip.rv = t[1]`
 */
${1:ReturnType} ${2:FunctionName}(${3:param})
{
    ${0:FunctionBody}
}
endsnippet


# function declaration
snippet fund0
/**
 * @brief       ${3:Brief function description here}
 * @return      ${4:无返回}
 */
${2:void} ${1:FuncName}();
endsnippet

# function declaration
snippet vfund0
/**
 * @brief       ${3:Brief function description here}
 * @return      ${4:无返回}
 */
virtual ${2:void} ${1:FuncName}();
endsnippet

# function declaration
snippet vofund0
/**
 * @brief       ${3:Brief function description here}
 * @return      ${4:无返回}
 */
virtual ${2:void} ${1:FuncName}() override;
endsnippet

# function declaration
snippet fund1
/**
 * @brief       ${5:Brief function description here}
 * @param       $3: ${6: Parameter description}
 * @return      ${7:无返回}
 */
${4:void} ${1:FuncName}(${2:Type1} ${3:Parame1});
endsnippet

# function declaration
snippet vfund1
/**
 * @brief       ${5:Brief function description here}
 * @param       $3: ${6: Parameter description}
 * @return      ${7:无返回}
 */
virtual ${4:void} ${1:FuncName}(${2:Type1} ${3:Parame1});
endsnippet

# function declaration
snippet vofund1
/**
 * @brief       ${5:Brief function description here}
 * @param       $3: ${6: Parameter description}
 * @return      ${7:无返回}
 */
virtual ${4:void} ${1:FuncName}(${2:Type1} ${3:Parame1}) override;
endsnippet

# function declaration
snippet fund2
/**
 * @brief       ${7:Brief function description here}
 * @param       $3: ${8: Parameter description}
 * @param       $5: ${9: Parameter description}
 * @return      ${10:无返回}
 */
${6:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1});
endsnippet

# function declaration
snippet vfund2
/**
 * @brief       ${7:Brief function description here}
 * @param       $3: ${8: Parameter description}
 * @param       $5: ${9: Parameter description}
 * @return      ${10:无返回}
 */
virtual ${6:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1});
endsnippet

# function declaration
snippet vofund2
/**
 * @brief       ${7:Brief function description here}
 * @param       $3: ${8: Parameter description}
 * @param       $5: ${9: Parameter description}
 * @return      ${10:无返回}
 */
virtual ${6:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1}) override;
endsnippet

# function declaration
snippet fund3
/**
 * @brief       ${9:Brief function description here}
 * @param       $3: ${10: Parameter description}
 * @param       $5: ${11: Parameter description}
 * @param       $7: ${12: Parameter description}
 * @return      ${13:无返回}
 */
${8:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1}, ${6:Type1} ${7:Parame1});
endsnippet

# function declaration
snippet vfund3
/**
 * @brief       ${9:Brief function description here}
 * @param       $3: ${10: Parameter description}
 * @param       $5: ${11: Parameter description}
 * @param       $7: ${12: Parameter description}
 * @return      ${13:无返回}
 */
virtual ${8:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1}, ${6:Type1} ${7:Parame1});
endsnippet

# function declaration
snippet vofund3
/**
 * @brief       ${9:Brief function description here}
 * @param       $3: ${10: Parameter description}
 * @param       $5: ${11: Parameter description}
 * @param       $7: ${12: Parameter description}
 * @return      ${13:无返回}
 */
virtual ${8:void} ${1:FuncName}(${2:Type1} ${3:Parame1}, ${4:Type1} ${5:Parame1}, ${6:Type1} ${7:Parame1}) override;
endsnippet

snippet funcd "C++ function description" b
/**
 * @brief:      ${4:brief}
 * @param:      `!p write_docstring_args(t[3],snip)`
 * @return:     `!p snip.rv = t[1]`
 */
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
    ${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
    ${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
    $2() {}
    virtual ~$2() {}
    /* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
    ${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
    $2() {}
    virtual ~$2() {}
    /* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
    ${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
# vim:ft=snippets:
